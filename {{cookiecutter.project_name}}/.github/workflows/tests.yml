name: Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  tests:
    name: {% raw %}${{ matrix.session }}{% endraw %} {% raw %}${{ matrix.python }}{% endraw %} / {% raw %}${{ matrix.os }}{% endraw %}
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.9", os: "ubuntu-latest", session: "mypy" }

    env:
      NOXSESSION: {% raw %}${{ matrix.session }}{% endraw %}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python {% raw %}${{ matrix.python }}{% endraw %}
        uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ matrix.python }}{% endraw %}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Create uv environment
        run: uv venv

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "{% raw %}${{ runner.os }}{% endraw %}-{}-{}-pre-commit".format(python, digest[:8])

          print(f"result={result}")

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: {% raw %}${{ steps.pre-commit-cache.outputs.result }}{% endraw %}-{% raw %}${{ hashFiles('.pre-commit-config.yaml') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ steps.pre-commit-cache.outputs.result }}{% endraw %}-

      - name: Run Nox
        run: |
          uv run python -m nox --python={% raw %}${{ matrix.python }}{% endraw %}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v4"
        with:
          name: coverage-data-{% raw %}${{ matrix.session }}{% endraw %}-{% raw %}${{ matrix.python }}{% endraw %}-{% raw %}${{ matrix.os }}{% endraw %}
          path: ".coverage.*"
          if-no-files-found: ignore
          include-hidden-files: true

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Create uv virtual environment
        run: uv venv

      - name: Install Nox
        run: |
          uv pip install nox
          uv run python -m nox --version

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage data and display human readable report
        run: |
          uv run python -m nox --session=coverage

      - name: Create coverage report
        run: |
          uv run python -m nox --session=coverage -- xml -i

      - name: Upload coverage report
        uses: codecov/codecov-action@v4.5.0
        env:
          CODECOV_TOKEN: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
          file: ./coverage.xml
